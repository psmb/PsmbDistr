prototype(Sfi.Site:CollectionsList) < prototype(T:Array) {
	@context.collectionsNode = ${q(node).children('collections').get(0)}
	@if.nodeExists = ${collectionsNode ? true : false}
	list = T:Collection {
		@process.tmpl = ${'<div class="interesting-themes js-interesting-themes">
			<span class="interesting-themes__label">' + collectionsNode.properties.title + '</span>
			<section class="filters js-filter-bar"><ul>' + value + '</ul></section>
		</div>'}
		@context.query = Sfi.Site:StreamQuery
		collection = T:RawCollection {
			aggregations = Sfi.Site:StreamAggregations
			collection = ${this.aggregations.collections.buckets}
			itemName = 'bucket'
			itemRenderer = ${q(site).find('#' + bucket.key).get(0)}
			@process.sort = ${value && q(value).count() > 0 && q(value).sort('_index', 'ASC')}
		}
		itemName = 'node'
		itemRenderer = T:Tag {
			@process.tmpl = ${'<li class="interesting-themes__item js-interesting-themes__item ' + (node.properties.pinned && 'js-interesting-themes__item--pinned') + '">' + value + '</li>'}
			tagName = 'a'
			attributes.class = ${(request.arguments.collection == node.identifier && 'active ') + 'js-filter-bar__item'}
			attributes.href = NodeUri {
				node = ${site}
				additionalParams {
					collection = ${node.identifier}
				}
			}
			content = ${q(node).property('title')}
			# content.@process.count = ${value + ' (' + bucket.doc_count + ')'}
		}
	}
	@cache {
		mode = 'cached'
		entryTags {
			1 = ${Neos.Caching.nodeTypeTag('Sfi.Site:Tag')}
		}
	}
}
