prototype(Sfi.Site:StreamFilterBar) < prototype(T:Case) {
	default {
		condition = ${true}
		renderer = T:Array {
			@context.aggregations = Sfi.Site:StreamAggregations
			all = T:Tag {
				tagName = 'a'
				attributes.class = ${(!(request.arguments.media || request.arguments.place || request.arguments.collection) && 'active ') + 'filter-bar__item js-filter-bar__item'}
				attributes.href = NodeUri {
					node = ${documentNode}
				}
				content = ${Translation.translate('allArticles', null, [], null, 'Sfi.Site')}
				# content.@process.count = ${value + ' (' + query.count() + ')'}
			}
			noType = T:Tag {
				tagName = 'a'
				attributes.class = 'filter-bar__item js-filter-bar__item'
				attributes.href = NodeUri {
					node = ${documentNode}
					additionalParams {
						media = 'noType'
					}
				}
				content = 'без типа'
				@if.onlyInBackend = ${node.context.inBackend}
			}
			media = T:Collection {
				collection = ${aggregations.media.buckets}
				itemName = 'bucket'
				itemKey = 'bucketName'
				itemRenderer = T:Tag {
					@if.notEmpty = ${bucket.doc_count > 0}
					tagName = 'a'
					attributes.href = NodeUri {
						node = ${documentNode}
						additionalParams {
							media = ${bucketName}
						}
					}
					attributes.class = ${(request.arguments.media == bucketName && 'active ') + 'filter-bar__item js-filter-bar__item'}
					content = T:Case {
						isPhoto {
							condition = ${bucketName == 'isPhoto'}
							renderer = ${Translation.translate('photo', null, [], null, 'Sfi.Site')}
						}
						isVideo {
							condition = ${bucketName == 'isVideo'}
							renderer = ${Translation.translate('video', null, [], null, 'Sfi.Site')}
						}
						isAudio {
							condition = ${bucketName == 'isAudio'}
							renderer = ${Translation.translate('audio', null, [], null, 'Sfi.Site')}
						}
						# @process.count = ${value + ' (' + bucket.doc_count + ')'}
					}
				}
			}
			places = T:Collection {
				collection = ${aggregations.places.buckets}
				itemName = 'bucket'
				itemRenderer = T:Tag {
					@context.node = ${q(site).find('#' + bucket.key).get(0)}
					tagName = 'a'
					attributes.href = NodeUri {
						node = ${documentNode}
						additionalParams {
							place = ${bucket.key}
						}
					}
					attributes.data-filter-place = ${node.identifier}
					attributes.data-place-title = ${node.properties.title}
					attributes.data-place-coordinates = ${node.properties.coordinates}
					attributes.class = ${(request.arguments.place == node.identifier && 'active ') + 'filter-bar__item js-filter-bar__item js-place'}
					content = ${node.properties.title}
					# content.@process.count = ${value + ' (' + bucket.doc_count + ')'}
				}
				# Set from Exhibitions
				@if.notMain = ${showPlaces ? true : false}
			}
			dateFilter = T:Collection {
				@context.dateAggregation = Neos.Fusion:RawCollection {
					collection = ${Array.reverse(aggregations.dateHistogram.buckets)}
					itemName = 'item'
					itemRenderer = Neos.Fusion:RawArray {
						value = ${item}
						year = ${Date.year(Date.parse(item.key_as_string, "Y-m-d"))}
					}
					@process.group = ${Neos.Array.groupBy(value, 'year')}
				}

				@process.option = Neos.Fusion:Array {
					option = Neos.Fusion:Tag {
						tagName = 'option'
						attributes.data-label-full = ${Translation.translate('byDate', null, [], null, 'Sfi.Site')}
						attributes.data-label-short = ${Translation.translate('allArticles', null, [], null, 'Sfi.Site')}
						attributes.label = ${this.data-label-full}
					}
					value = ${value}
				}
				@process.wrap = ${'<select style="width: 160px; margin: 0 0 0 24px !important; padding: 6px 12px !important" class="filter-bar__item input js-filter-bar__datePicker">' + value + '</select>'}
				collection = ${dateAggregation}
				itemName = 'yearBucket'
				itemKey = 'year'
				itemRenderer = Neos.Fusion:Collection {
					@process.wrap = ${'<optgroup label="' + year + '">' + value + '</optgroup>'}
					collection = ${yearBucket}
					itemName = 'bucket'
					itemKey = 'bucketName'
					itemRenderer = T:Tag {
						@if.notEmpty = ${bucket.value.doc_count > 0}
						tagName = 'option'
						attributes.href = NodeUri {
							node = ${documentNode}
							additionalParams {
								dateTill = ${bucket.value.key_as_string}
							}
						}
						attributes.selected = ${request.arguments.dateTill == bucket.value.key_as_string}
						attributes.value = NodeUri {
							node = ${documentNode}
							additionalParams {
								dateTill = ${bucket.value.key_as_string}
							}
						}
						attributes.data-label-full = ${Date.formatCldr(Date.parse(bucket.value.key_as_string, "Y-m-d"), 'LLLL y')}
						attributes.data-label-short = ${Date.formatCldr(Date.parse(bucket.value.key_as_string, "Y-m-d"), 'LLLL')}
						attributes.data-label-short.@process.count = ${value + ' (' + bucket.value.doc_count + ')'}
						attributes.label = ${this.data-label-short}
					}
				}
			}
		}
	}
}
