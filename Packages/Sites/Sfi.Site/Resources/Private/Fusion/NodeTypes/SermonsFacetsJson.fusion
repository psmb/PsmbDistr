root.sermonsFacetsJson {
  condition = ${request.arguments.facets}
  renderer = Neos.Fusion:Http.Message {
    httpResponseHead {
      headers.Content-Type = 'application/json;charset=utf-8'
      headers.Access-Control-Allow-Origin = '*'
    }
    content = Sfi.Site:SermonsFacetsJson
  }
}
root.@cache.entryIdentifier.facets = ${request.arguments.facets}

prototype(Sfi.Site:SermonsFacetsJson) < prototype(T:Value) {
  authorConfig = T:RawArray {
    terms = T:RawArray {
      field = 'author'
      size = 100
    }
  }
  themeConfig = T:RawArray {
    terms = T:RawArray {
      field = 'themes'
      size = 100
    }
  }
  @context.agg = ${Search.query(node).nodeType("Sfi.Site:Sermon").aggregation('author', this.authorConfig).aggregation('theme', this.themeConfig).execute().aggregations}
 
  value = T:RawArray {
    authors = T:RawCollection {
      collection = ${agg.author.buckets}
      itemName = 'bucket'
      itemRenderer = T:RawArray {
        id = ${bucket.key}
        title = ${q(site).find('#' + bucket.key).get(0).properties.title}
        count = ${bucket.doc_count}
      }
      # @process.sort = ${value && q(value).count() > 0 && q(value).sort('_index', 'ASC')}
    }
    themes = T:RawCollection {
      collection = ${agg.theme.buckets}
      itemName = 'bucket'
      itemRenderer = T:RawArray {
        id = ${bucket.key}
        title = ${q(site).find('#' + bucket.key).get(0).properties.title}
        count = ${bucket.doc_count}
      }
      # @process.sort = ${value && q(value).count() > 0 && q(value).sort('_index', 'ASC')}
    }
  }
  
  
  
  

  @process.1 = ${Json.stringify(value)}

  @cache {
    mode = 'cached'
    entryIdentifier {
    }
    entryTags {
      1 = ${Neos.Caching.nodeTypeTag('Sfi.Site:Sermon')}
    }
  }
}