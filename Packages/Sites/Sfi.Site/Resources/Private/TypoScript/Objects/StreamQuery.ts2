prototype(Sfi.Site:StreamQuery) < prototype(T:Case) {
	announcements {
		condition = ${node.name == 'node-57c7aa010c560'}
		renderer = ${Search.query(site).nodeType('Sfi.Site:News').exactMatch('type', 'announcement').sortDesc('date')}
	}
	externalNews {
		condition = ${node.name == 'node-57cea530c2c46'}
		renderer = ${Search.query(site).nodeType('Sfi.Site:News').exactMatch('type', 'externalNews').sortDesc('date')}
	}
	ourNews {
		condition = ${true}
		renderer = T:Value {
			value = ${Search.query(site).nodeType('Sfi.Site:News')}
			value.@process.newsPages = T:Case {
				notNews {
					condition = ${q(node).is('[instanceof Sfi.Site:News]') ? false : true}
					renderer = ${value}
				}
				tags {
					condition = ${node.properties.tags}
					renderer = ${value.queryFilter('bool', {should: [
						{terms: {tags: q(node.properties.tags).map('value.identifier')}},
						{terms: {sections: q(node.properties.sections).map('value.identifier')}},
						{terms: {places: q(node.properties.places).map('value.identifier')}},
						{terms: {projects: q(node.properties.projects).map('value.identifier')}},
						{terms: {collections: q(node.properties.collections).map('value.identifier')}}
					]})}
				}
				tags {
					condition = ${node.properties.tags}
					renderer = ${value.queryFilter('bool', {should: [
						{terms: {tags: q(node.properties.tags).map('value.identifier')}}
					]})}
				}
				sections {
					condition = ${node.properties.sections}
					renderer = ${value.queryFilter('bool', {should: [
						{terms: {sections: q(node.properties.sections).map('value.identifier')}}
					]})}
				}
				places {
					condition = ${node.properties.places}
					renderer = ${value.queryFilter('bool', {should: [
						{terms: {places: q(node.properties.places).map('value.identifier')}}
					]})}
				}
				projects {
					condition = ${node.properties.projects}
					renderer = ${value.queryFilter('bool', {should: [
						{terms: {projects: q(node.properties.projects).map('value.identifier')}}
					]})}
				}
				collections {
					condition = ${node.properties.collections}
					renderer = ${value.queryFilter('bool', {should: [
						{terms: {collections: q(node.properties.collections).map('value.identifier')}}
					]})}
				}
				default {
					condition = ${true}
					renderer = ${value.exactMatch('type', 'ourNews')}
				}
			}
			value.@process.tagsPages = ${q(node).is('[instanceof Sfi.Site:TagMixin]') ? value.queryFilter('bool',{should: [
					{term: {sections: node.identifier}},
					{term: {tags: node.identifier}},
					{term: {places: node.identifier}},
					{term: {projects: node.identifier}},
					{term: {collections: node.identifier}}
				],
				must_not: [
					{term: {type: 'externalNews'}},
					{term: {type: 'announcement'}}
				]
			}) : value}
			value.@process.postFilters = T:Case {
				skipAggregation {
					condition = ${isAggregation}
					renderer = ${value}
				}
				place {
					condition = ${request.arguments.place}
					renderer = ${value.exactMatch('places', request.arguments.place)}
				}
				collection {
					condition = ${request.arguments.collection}
					renderer = ${value.exactMatch('collections', request.arguments.collection)}
				}
				photo {
					condition = ${request.arguments.media == 'isPhoto'}
					renderer = ${value.exactMatch('isPhoto', true)}
				}
				audio {
					condition = ${request.arguments.media == 'isAudio'}
					renderer = ${value.exactMatch('isAudio', true)}
				}
				video {
					condition = ${request.arguments.media == 'isVideo'}
					renderer = ${value.exactMatch('isVideo', true)}
				}
				noType {
					condition = ${request.arguments.media == 'noType'}
					renderer = ${value.queryFilter('bool', {must_not: [
						{term: {type: 'ourNews'}},
						{term: {type: 'externalNews'}},
						{term: {type: 'announcement'}}
					]})}
				}
				defaultMain {
					condition = ${site == node}
					renderer = ${value.exactMatch('type', 'ourNews')}
				}
				default {
					condition = ${true}
					renderer = ${value}
				}
			}
		}
	}
}
